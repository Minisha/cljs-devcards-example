;; Analyzed by ClojureScript 1.8.51
{:use-macros {deftest devcards.core, defcard devcards.core}, :excludes #{}, :name devcards-example.core, :imports nil, :requires {dc devcards.core, devcards.core devcards.core, sab sablono.core, sablono.core sablono.core}, :uses nil, :defs {hello-world {:protocol-inline nil, :meta {:file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :line 17, :column 7, :end-line 17, :end-column 18, :arglists (quote ([]))}, :name devcards-example.core/hello-world, :variadic false, :file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, display-name {:protocol-inline nil, :meta {:file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :line 25, :column 7, :end-line 25, :end-column 19, :arglists (quote ([name]))}, :name devcards-example.core/display-name, :variadic false, :file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :end-column 19, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, multiply {:protocol-inline nil, :meta {:file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :line 33, :column 7, :end-line 33, :end-column 15, :arglists (quote ([x]))}, :name devcards-example.core/multiply, :variadic false, :file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, multiply-nested {:protocol-inline nil, :meta {:file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :line 39, :column 7, :end-line 39, :end-column 22, :arglists (quote ([number]))}, :name devcards-example.core/multiply-nested, :variadic false, :file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :end-column 22, :method-params ([number]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([number]))}, inline-style {:protocol-inline nil, :meta {:file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :line 47, :column 7, :end-line 47, :end-column 19, :arglists (quote ([]))}, :name devcards-example.core/inline-style, :variadic false, :file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, for-loop {:protocol-inline nil, :meta {:file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :line 61, :column 7, :end-line 61, :end-column 15, :arglists (quote ([]))}, :name devcards-example.core/for-loop, :variadic false, :file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, main {:protocol-inline nil, :meta {:file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :line 72, :column 7, :end-line 72, :end-column 11, :arglists (quote ([]))}, :name devcards-example.core/main, :variadic false, :file "/Users/palo/devcards-closjureScript/devcards-example/src/devcards_example/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {devcards.core devcards.core, dc devcards.core, sab sablono.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{:path :multiply-nested-card :hello-world-card :name-card :multiply-card :func :name :inline-style-card :devcards_example.core :documentation :for-loop-card :main-obj :initial-data :options :first-card}, :order [:path :func :devcards_example.core :first-card :name :documentation :main-obj :initial-data :options :hello-world-card :name-card :multiply-card :multiply-nested-card :inline-style-card :for-loop-card]}, :doc nil}